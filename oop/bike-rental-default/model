import * as crypto from 'crypto';
import * as bcrypt from 'bcrypt';

class Bike {
  id: string
  availability: boolean
  location: {
    latitude: number
    longitude: number
  }

  constructor(latitude: number = 0, longitude: number = 0) {
    this.id = crypto.randomUUID()
    this.availability = true
    this.location = {
      latitude: latitude,
      longitude: longitude
    }
  }

  setLocation(latitude: number, longitude: number): void {
    this.location.latitude = latitude
    this.location.longitude = longitude
  }
}

class User {
  id: string
  email: string
  password: string
  passwordHash: string

  constructor(email: string, password: string) {
    this.id = crypto.randomUUID()
    this.email = email
    this.password = password
    this.passwordHash = ''
  }

  setPassword(password: string): void {
    const salt = 10
    this.passwordHash = bcrypt.hashSync(password, salt)
  }

  checkPassword(password: string): boolean {
    return bcrypt.compareSync(password, this.passwordHash)
  }
}

class App {
  users: User[] = []
  bikes: Bike[] = []

  addUser(user: User): void {
    if (this.users.some(u => u.email === user.email)) {
      throw new Error('User with the same email already registered.')
    }
    user.setPassword(user.password)
    this.users.push(user)
  }

  findUser(email: string): User | undefined {
    return this.users.find(user => user.email === email)
  }

  authUser(email: string, password: string): User | undefined {
    const user = this.findUser(email)
    if (user && user.checkPassword(password)) {
      return user
    }
    return undefined
  }

  registerBike(latitude?: number, longitude?: number): void {
    const bike = new Bike(latitude, longitude)
    this.bikes.push(bike)
  }

  removeUser(user: User): void {
    this.users = this.users.filter(u => u.id !== user.id)
  }

  listUsers(): User[] {
    return this.users
  }

  listBikes(): Bike[] {
    return this.bikes
  }

  rentBike(userId: string, bikeId: string): Bike | undefined {
    const user = this.findUser(userId)
    const bike = this.bikes.find(bike => bike.id === bikeId)

    if (!user || !bike) {
      return undefined
    }

    if (!bike.availability) {
      throw new Error('Bike is not available for rent.')
    }

    bike.availability = false
    return bike
  }

  returnBike(bikeId: string): number | undefined {
    const bike = this.bikes.find(bike => bike.id === bikeId)

    if (!bike) {
      return undefined
    }

    if (bike.availability) {
      throw new Error('Bike is already available.')
    }

    bike.availability = true
    return 50
  }

  updateBikeLocation(bikeId: string, latitude: number, longitude: number): boolean {
    const bike = this.bikes.find(bike => bike.id === bikeId)
    if (!bike) {
      return false
    }
    bike.setLocation(latitude, longitude)
    return true
  }
}

const app = new App()

const user1 = new User('user@email.com', 'abc123')
app.addUser(user1)

const authenticatedUser = app.authUser('user@email.com', 'abc123')
if (authenticatedUser) {
  console.log('User authenticated:', authenticatedUser.email)
} else {
  console.log('Authentication failed.')
}

app.registerBike(40.730610, -73.935242)
const bikesList = app.listBikes()
console.log('Bikes:', bikesList)

const rentedBike = app.rentBike(user1.id, bikesList[0].id)
if (rentedBike) {
  console.log('Bike rented:', rentedBike.id)
} else {
  console.log('Rental failed.')
}

const returnedBikeId = rentedBike ? rentedBike.id : ''
const rentalFee = app.returnBike(returnedBikeId)
if (rentalFee !== undefined) {
  console.log('Bike returned. Rental fee:', rentalFee)
} else {
  console.log('Return failed.')
}